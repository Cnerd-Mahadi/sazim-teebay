// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @db.Uuid @unique
  email String @unique
  password String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String @db.Uuid @unique
  products Product[]
  buyer ProductSold? @relation(name: "buyer")
  seller ProductSold? @relation(name: "seller")
  owner ProductRented? @relation(name: "owner")
  renter ProductRented? @relation(name: "renter")
}

model Profile{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fname String
  lname String
  address String
  phone String
  user User?
}

model Product{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String @unique
  desc String 
  categories CategoriesOnProducts[]
  brand Brand @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  brandId String @db.Uuid
  owner User @relation(fields: [ownerId], references: [id], onDelete: NoAction)
  ownerId String @db.Uuid 
  price Int
  rentPerHour Int
  viewCount Int
  showDay Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  productSold ProductSold?
  productRented ProductRented?
}
model Brand{
id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
name String @unique
products Product[]
}

model Category{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type String @unique
  products CategoriesOnProducts[]
}

model CategoriesOnProducts {
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String @db.Uuid
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.Uuid

   @@id([productId, categoryId])
}

model ProductSold{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String @db.Uuid @unique
  seller User @relation("seller", fields: [sellerId], references: [id], onDelete: NoAction)
  sellerId  String @db.Uuid @unique
  buyer User @relation("buyer", fields: [buyerId], references: [id], onDelete: NoAction)
  buyerId String @db.Uuid @unique
}

model ProductRented{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String @db.Uuid @unique
  owner User @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction)
  ownerId  String @db.Uuid @unique
  renter User @relation("renter", fields: [renterId], references: [id], onDelete: NoAction)
  renterId String @db.Uuid @unique
  rentingTime DateTime @default(now()) @db.Timestamptz(6)
  rentHourDuration Int 
}